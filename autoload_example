<?php
/**
* 功能：框架类自动加载
* 说明：建议将此文件置于项目目录内，与gear框架目录同级
* 示例:
* ├── autoload.php
* ├── avatar   项目主目录
* ├── gear     gear框架根目录
* ├── main.php 项目http服务器启动类
* ├── scripts  项目脚本文件目录
* └── static   项目静态文件目录
* 首次使用：将此文件改名为autoload.php 并移到与gear框架目录同级
*/
const GEAR_PATH = __DIR__ . DIRECTORY_SEPARATOR . "Gear";
const CORE_PATH = GEAR_PATH . DIRECTORY_SEPARATOR . "core";
const VENDOR_PATH = GEAR_PATH . DIRECTORY_SEPARATOR . "vendor";
/**
* 需要使用http服务器时可选,USER_PATH为mvc项目路径，STATIC_PATH为静态文件路径
* const USER_PATH = __DIR__ . DIRECTORY_SEPARATOR. "avatar";
* const STATIC_PATH = __DIR__. DIRECTORY_SEPARATOR . "static";
*/

function getFilePaths($path = CORE_PATH, &$hash = [], $filter = [])
{

    //过滤掉点和点点
    $map = array_filter(scandir($path), function($var){
        return $var[0] != '.';
    });
    foreach ($map as $item) {
        $curPath = $path.DIRECTORY_SEPARATOR.$item;
        if(is_dir($curPath)){
            if(in_array($item, $filter)){
                continue;
            }
            if($item == '.' || $item == '..'){
                continue;
            }
            getFilePaths($curPath, $hash, $filter);
        }
        if(false == strpos($item,".php")){
            continue;
        }
        if(is_file($curPath)){
            $className = strtolower(str_replace('.php','',$item));
            $hash[$className] = $curPath;
        }
    }
    return $hash;
}

function getFilePathHash()
{
    $hash = $userHash = [];
    getFilePaths(CORE_PATH, $hash);
    if(defined("USER_PATH")){
        getFilePaths(USER_PATH, $userHash, ['templates', 'scripts']);
    }
    return [$hash, $userHash];
}

list($hash, $userHash) = getFilePathHash();
$userClasses = array_keys($userHash);
$hash += $userHash;
spl_autoload_register(function ($className) use($hash){
    $className = strtolower($className);
    $filePath = empty($hash[$className]) ? '' : $hash[strtolower($className)];
    $filePath2 = VENDOR_PATH.DIRECTORY_SEPARATOR.$className.".php";
    if(file_exists($filePath)){
        include($filePath);
    } else if(file_exists($filePath2)) {
        include($filePath2);
    }
});
CacheFactory::getInstance(CacheFactory::TYPE_MEM)->set("GLOBAL_USER_CLASS", json_encode($userClasses));
unset($hash);
